//注意：凡是需要得到一个函数内部异步操作的结果
//      异步：     setTimeout
//                 readFile
//                 writeFile
//                  ajax
//                  readdir等等
//      往往异步 API 都伴随一个回调函数
//      这种情况必须通过：回调函数


 PHP 中为什么就可以直接 `require`、`include` 因为 PHP 当初在设计的时候就加入了这个功能
  + PHP 这门语言天生就支持
  + 模块作用域
  + 可以使用 API 来进行文件与文件之间的依赖加载
  + 在 Node 这个环境中对 JavaScript 进行了特殊的模块化支持 CommonJS
  + JavaScript 天生不支持模块化
    * require
    * exports
    * Node.js 才有的
  + 在浏览器中也可以像在 Node 中的模块一样来进行编程
    * `<script>` 标签来引用加载，而且你还必须考虑加载的顺序问题
    * require.js 第三方库 AMD
    * sea.js     第三方库 CMD
   + 无论是 CommonJS、AMD、CMD、UMD、EcmaScript 6 Modules 官方规范
      * *******都是为了解决 JavaScript 的模块化问题*******
      * CommonJS、AMD、CMD 都是民间搞出来的
      * EcmaScript 是官方规范定义
      * 官方看民间都在乱搞，开发人员为了在不同的环境使用不同的 JavaScript 模块化解决方案
      * 所以 EcmaScript 在 2015 年发布了 EcmaScript 2016 官方标准
      * 其中就包含了官方对 JavaScript 模块化的支持
      * 也就是说语言天生就支持了
      * 但是虽然标准已经发布了，但是很多 JavaScript 运行换将还不支持
      * Node 也是只在 8.5 版本之后才对 EcmaScript 6 module 进行了支持
      * 后面学 Vue 的时候会去学习
      * less 编译器 > css
      * EcmaScript 6 -> 编译器 -> EcmaScript 5
      * 目前的前端情况都是使用很多新技术，然后利用编译器工具打包可以在低版本浏览器运行。
      * 使用新技术的目的就是为了提高效率，增加可维护性



      使用Node操作Mysql数据库
      安装：
        1.npm install --save mysql



    Promise
      callback hell 回调地狱
        //异步的，读取顺序不一定，文件越大读取速度越慢，越靠后
        //通过回调嵌套的方式来保证顺序
        //回调地狱
      为了解决以上编码方式带来的问题（回调地狱嵌套），所以在EcmaScript6中新增了一个API，Promise
        Promise的英文就是承诺、保证的意思（i promise you）

      Promise容器中存放了一个异步任务：
            pending状态（正在进行） -->{ 1.Resolved成功 2.Rejected失败} pending变成其中一种：要么成功要么失败，只能变成其中一种


  启动本地json服务器
      安装json-server
      使用 json-server --watch db.json
      网址访问localhost:3000/users/1  // 1表示id
